#!/usr/bin/env node

const path = require('path');
const pkg = require('../package.json');
const fs = require('fs');
const version = pkg.version;
const PeerServer = require('../src').PeerServer;
const opts = require('optimist')
  .usage('Usage: $0')
  .options({
    expire_timeout: {
      demand: false,
      alias: 't',
      description: 'timeout (milliseconds)',
      default: 5000
    },
    concurrent_limit: {
      demand: false,
      alias: 'c',
      description: 'concurrent limit',
      default: 5000
    },
    key: {
      demand: false,
      alias: 'k',
      description: 'connection key',
      default: 'peerjs'
    },
    port: {
      demand: false,
      alias: 'p',
      description: 'port',
      default: 9090,
    },
    path: {
      demand: false,
      description: 'custom path',
      default: '/'
    },
    proxied: {
      demand: false,
      description: 'Set true if PeerServer stays behind a reverse proxy',
      default: false
    }
  })
  .argv;

process.on('uncaughtException', function (e) {
  console.error('Error: ' + e);
});

const server = PeerServer(opts, server => {
  const host = server.address().address;
  const port = server.address().port;
  console.log('Started PeerServer on %s, port: %s, path: %s (v. %s)', host, port, opts.path || '/', version);
});

server.on('connection', client => {
  console.log(`Client connected: ${client.getId()}`);
});

server.on('disconnect', client => {
  console.log(`Client disconnected: ${client.getId()}`);
});

server.on("message", client => {
  console.log(`Client message recieved: ${client.getId()}`)
});

server.on("error", client => {
  console.log(`Client Error: ${client.getId()}`)
});